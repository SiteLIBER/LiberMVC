@using System.Web.Mvc
@using LiberMvc.Models

@helper Script(string scriptUrl, UrlHelper url)
{
	<script src="@url.Content("~/Scripts/" + scriptUrl)" type="text/javascript"></script>
}

@helper Css(string contentUrl, UrlHelper url)
{
	<link href="@url.Content("~/Content/" + contentUrl)" rel="stylesheet" type="text/css" />
}

@helper NomeAutor(Postagem post) {
	<span class="author">Por
		@foreach (var i in post.Autores) {
			@i.Autor.Nome
			
			if (i.AutorID != post.Autores.Last().AutorID) { <text> & </text> }
		}
	</span>
}

@helper Image(string imageUrl, UrlHelper url, string alt = "")
{
	<img src="@url.Content("~/Content/images/" + imageUrl)" alt="@alt"/>
}

@helper LinkedImage(string imageUrl, string link, UrlHelper url, string alt = "")
{
	<a href="@link"><img src="@url.Content("~/Content/images/" + imageUrl)" alt="@alt"/></a>
}

@helper Pager(LiberMvc.IPaginatedList model, UrlHelper url)
{
	
	var route = url.RequestContext.RouteData.Values;
	if (model.HasPreviousPage)
	{ 
		<a href="@url.RouteUrl(new { action = route["action"].ToString(), controller = route["controller"].ToString(), id = route["id"], page = (model.PageIndex - 1) })" class="button"><< Anterior</a>
	}

	if (model.HasNextPage)
	{ 
		<a href="@url.RouteUrl(new { action = route["action"].ToString(), controller = route["controller"].ToString(), id = route["id"], page = (model.PageIndex + 1) })" class="button">Próxima >></a>
	}
}
